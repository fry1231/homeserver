services:
  homescreen:
    container_name: homescreen
    restart: no
    environment:
      - DOMAIN=${DOMAIN:?err}
      - IDF_TOKEN=${IDF_TOKEN:?err}
      - POSTGRES_HOST=${POSTGRES_HOST:?err}
      - POSTGRES_PORT=${POSTGRES_PORT:?err}
      - POSTGRES_USER=${POSTGRES_USER:?err}
      - POSTGRES_PASS=${POSTGRES_PASS:?err}
      - REDIS_HOST=${REDIS_HOST:?err}
      - REDIS_PORT=${REDIS_PORT:?err}
      - SECRET=${SECRET:?err}
      - INFLUXDB_USERNAME=${INFLUXDB_USERNAME:?err}
      - INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD:?err}
      - IS_TESTING=${IS_TESTING:?err}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:?err}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:?err}
    build: app
    networks:
      - monitoring-network
#    depends_on:
#      redis:
#        condition: service_started
#      db:
#        condition: service_started
    command: uvicorn main:app --proxy-headers --host 0.0.0.0 --forwarded-allow-ips '172.200.0.200' --log-level debug
    expose:
      - 8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homescreen.rule=Host(`homescreen.${DOMAIN:?err}`)"
      - "traefik.http.routers.homescreen.entrypoints=websecure"
      - "traefik.http.routers.homescreen.tls.certresolver=letsencrypt"
      - "traefik.http.services.homescreen.loadbalancer.server.port=8000"


  react:
    container_name: react
    restart: always
    build: react-app
    command: npm run dev
    networks:
      - monitoring-network
    expose:
      - 3000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.react.rule=Host(`hs.${DOMAIN:?err}`)"
      - "traefik.http.routers.react.entrypoints=websecure"
      - "traefik.http.routers.react.tls.certresolver=letsencrypt"


  influxdb:
    container_name: influxdb
    image: influxdb:1.8.10-alpine
    restart: always
    networks:
      - monitoring-network
    expose:
      - 8086
    volumes:
      - influxdb-storage:/var/lib/influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME:?err}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD:?err}
      - DOCKER_INFLUXDB_INIT_ORG=influx-org
      - DOCKER_INFLUXDB_INIT_BUCKET=influx-bucket
      - DOCKER_INFLUXDB_INIT_RETENTION=14d


  traefik:
    container_name: traefik
    image: "traefik:v3.1"
    restart: unless-stopped
    networks:
      monitoring-network:
        ipv4_address: 172.200.0.200
    ports:
      - "80:80"
      - "443:443"
    command:
      - "--log.level=INFO"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.httpClientTimeout=30"

      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      - "--entrypoints.web.http.redirections.entrypoint.to=:443"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"

      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${EMAIL:?err}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"

      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--entrypoints.metrics.address=:8899"

    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik-ru.${DOMAIN:?err}`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:${HASHPASS_ADMIN:?err}"


  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.52.0
    command:
      - "--storage.tsdb.retention.time=7d"
      - "--config.file=/etc/prometheus/prometheus.yml"
    restart: unless-stopped
    networks:
      - monitoring-network
    expose:
        - 9090
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-storage:/prometheus


  grafana:
    container_name: grafana
    image: grafana/grafana:10.1.10
    restart: unless-stopped
    networks:
      - monitoring-network
    expose:
      - 3000
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`dashboard.${DOMAIN:?err}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.middlewares=auth"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"


  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:v1.8.1
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    pid: host
    restart: unless-stopped
    networks:
      - monitoring-network
    expose:
      - 9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

volumes:
  letsencrypt:
  influxdb-storage:
  grafana-storage:
  prometheus-storage:


networks:
  monitoring-network:
    name: monitoring-network
    ipam:
      driver: bridge
      config:
        - subnet: "172.200.0.0/24"
version: '3.3'

services:
  homescreen:
    container_name: homescreen
    restart: always
#    env_file:
#      - .env  # !
    environment:
      - DOMAIN=${DOMAIN:?err}
      - IDF_TOKEN=${IDF_TOKEN:?err}
      - POSTGRES_USER=${POSTGRES_USER:?err}
      - POSTGRES_PASS=${POSTGRES_PASS:?err}
      - SECRET=${SECRET:?err}
      - INFLUXDB_USERNAME=${INFLUXDB_USERNAME:?err}
      - INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD:?err}
      - IS_TESTING=${IS_TESTING:?err}
    build: app
    networks:
      - migrebot_migrebot-network
#    depends_on:
#      redis:
#        condition: service_started
#      db:
#        condition: service_started
    command: uvicorn main:app --proxy-headers --host 0.0.0.0 --forwarded-allow-ips '172.19.0.250' --log-level critical
    expose:
      - 8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homescreen.rule=Host(`homescreen.${DOMAIN:?err}`)"
      - "traefik.http.routers.homescreen.entrypoints=websecure"
      - "traefik.http.routers.homescreen.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.homescreen-auth.basicauth.users=admin:${HASHPASS_ADMIN:?err}"
#      - "traefik.http.routers.homescreen.middlewares=homescreen-auth"   # switched to jwt
      - "traefik.http.routers.homescreen-insecure.rule=Host(`homescreen.${DOMAIN:?err}`)"
      - "traefik.http.routers.homescreen-insecure.rule=Host(`${IP}`)"
      - "traefik.http.routers.homescreen-insecure.entrypoints=web"
      - "traefik.http.routers.homescreen-insecure.middlewares=homescreen-auth"


#  todobot:
#    container_name: todobot
#    env_file:
#      - .env  # !
#    build: todobot
#    depends_on:
#      - db
#    command: python -m main

#  db:
#    container_name: pg_container
#    image: postgres:13-alpine
#    user: postgres
#    restart: always
#    depends_on:
#      - traefik
##    ports:
##      - "5432:5432"
#    volumes:
#      - postgres_data:/var/lib/postgresql/data/
#    environment:
#      - POSTGRES_USER=${POSTGRES_USER:?err}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?err}
#      - POSTGRES_DB=${POSTGRES_DB:?err}
#    healthcheck:
#      test:
#        - CMD-SHELL
#        - pg_isready -U ${POSTGRES_USER} --dbname=${POSTGRES_DB:?err}
#      interval: 3600s
#      timeout: 10s
#      retries: 5
#      start_period: 30s

  influxdb:
    container_name: influx
    image: influxdb:1.8.10-alpine
    restart: always
    networks:
      - migrebot_migrebot-network
    expose:
      - 8086
    volumes:
      - influxdb-storage:/var/lib/influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME:?err}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD:?err}
      - DOCKER_INFLUXDB_INIT_ORG=influx-org
      - DOCKER_INFLUXDB_INIT_BUCKET=influx-bucket
      - DOCKER_INFLUXDB_INIT_RETENTION=14d

#  redis:
#    container_name: redis
#    image: redis:7.0.7
#    restart: always
#    expose:
#      - 6379

  traefik:
    container_name: traefik
    image: traefik:v2.9
    restart: always
    networks:
      migrebot_migrebot-network:
        ipv4_address: 172.19.0.250   # change accordingly to the subnet or set the subnet implicitly in the network definition
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    command:
      - "--log.level=INFO"
#      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
#      - "--entrypoints.web.http.redirections.entrypoint.to=:443"     # backward compatibility
#      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
#      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${EMAIL:?err}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.${DOMAIN:?err}`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:${HASHPASS_ADMIN:?err}"
volumes:
  letsencrypt:
  influxdb-storage:

networks:
  migrebot_migrebot-network:
    external: true